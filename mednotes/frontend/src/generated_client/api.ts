/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EmbeddedSentenceGet
 */
export interface EmbeddedSentenceGet {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedSentenceGet
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedSentenceGet
     */
    'topic'?: string | null;
}
/**
 * 
 * @export
 * @interface EmbeddedSentencePost
 */
export interface EmbeddedSentencePost {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedSentencePost
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedSentencePost
     */
    'topic'?: string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * MlApi - axios parameter creator
 * @export
 */
export const MlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Embed Sentence
         * @param {EmbeddedSentencePost} embeddedSentencePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedSentenceMlEmbedPost: async (embeddedSentencePost: EmbeddedSentencePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'embeddedSentencePost' is not null or undefined
            assertParamExists('embedSentenceMlEmbedPost', 'embeddedSentencePost', embeddedSentencePost)
            const localVarPath = `/ml/embed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(embeddedSentencePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search For Value
         * @param {string} searchSentence 
         * @param {string | null} [topic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForValueMlSearchGet: async (searchSentence: string, topic?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchSentence' is not null or undefined
            assertParamExists('searchForValueMlSearchGet', 'searchSentence', searchSentence)
            const localVarPath = `/ml/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchSentence !== undefined) {
                localVarQueryParameter['search_sentence'] = searchSentence;
            }

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MlApi - functional programming interface
 * @export
 */
export const MlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Embed Sentence
         * @param {EmbeddedSentencePost} embeddedSentencePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embedSentenceMlEmbedPost(embeddedSentencePost: EmbeddedSentencePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedSentenceGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.embedSentenceMlEmbedPost(embeddedSentencePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search For Value
         * @param {string} searchSentence 
         * @param {string | null} [topic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchForValueMlSearchGet(searchSentence: string, topic?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmbeddedSentenceGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchForValueMlSearchGet(searchSentence, topic, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MlApi - factory interface
 * @export
 */
export const MlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MlApiFp(configuration)
    return {
        /**
         * 
         * @summary Embed Sentence
         * @param {EmbeddedSentencePost} embeddedSentencePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embedSentenceMlEmbedPost(embeddedSentencePost: EmbeddedSentencePost, options?: any): AxiosPromise<EmbeddedSentenceGet> {
            return localVarFp.embedSentenceMlEmbedPost(embeddedSentencePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search For Value
         * @param {string} searchSentence 
         * @param {string | null} [topic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForValueMlSearchGet(searchSentence: string, topic?: string | null, options?: any): AxiosPromise<Array<EmbeddedSentenceGet>> {
            return localVarFp.searchForValueMlSearchGet(searchSentence, topic, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MlApi - object-oriented interface
 * @export
 * @class MlApi
 * @extends {BaseAPI}
 */
export class MlApi extends BaseAPI {
    /**
     * 
     * @summary Embed Sentence
     * @param {EmbeddedSentencePost} embeddedSentencePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public embedSentenceMlEmbedPost(embeddedSentencePost: EmbeddedSentencePost, options?: AxiosRequestConfig) {
        return MlApiFp(this.configuration).embedSentenceMlEmbedPost(embeddedSentencePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search For Value
     * @param {string} searchSentence 
     * @param {string | null} [topic] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlApi
     */
    public searchForValueMlSearchGet(searchSentence: string, topic?: string | null, options?: AxiosRequestConfig) {
        return MlApiFp(this.configuration).searchForValueMlSearchGet(searchSentence, topic, options).then((request) => request(this.axios, this.basePath));
    }
}



